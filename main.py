import os

import aiosqlite
from aiogram.fsm.state import StatesGroup, State
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.utils import keyboard
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

import db_settings
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
import aioschedule

import logging
import asyncio
import datetime
import time
from multiprocessing import Process

ADMIN_IDS = [1374125439]
GROUPS_FOLDER = "raspisanie"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token='7786125648:AAG0qZ17_SQwRCSkcd7FpN1AE5DoK4LYg8U')
dp = Dispatcher()

router = Router(name="example_router")
dp.include_router(router)

scheduler = AsyncIOScheduler()

async def check_lunch_first_group():
    posting_time = ['11:50']

    while True:
        if datetime.datetime.now().strftime('%H:%M') in posting_time:
            users = await db_settings.get_first_group_notifi_on()
            for user in users:
                await bot.send_message(user[0], '<b>‚è∞ –ü–æ—Ä–∞ –Ω–∞ –æ–±–µ–¥ –ø–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞!</b>', parse_mode='HTML')
        await asyncio.sleep(60)

async def check_lunch_second_group():
    posting_time = ['12:45']

    while True:
        if datetime.datetime.now().strftime('%H:%M') in posting_time:
            users = await db_settings.get_second_group_notifi_on()
            for user in users:
                await bot.send_message(user[0], '<b>‚è∞ –ü–æ—Ä–∞ –Ω–∞ –æ–±–µ–¥ –≤—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞!</b>', parse_mode='HTML')
        await asyncio.sleep(60)

async def check_start_lessons():
    posting_time = ['8:00']

    while True:
        if datetime.datetime.now().strftime('%H:%M') in posting_time:
            users = await db_settings.get_users_notifi_on()
            for user in users:
                await bot.send_message(user[0], '<b>‚è∞ –£—Ä–æ–∫–∏ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—É—Ç—Å—è, –ø–æ—Å–ø–µ—à–∏!</b>', parse_mode='HTML')
        await asyncio.sleep(60)

def start_check_lunc():
    asyncio.run((check_lunch_first_group()))
    asyncio.run((check_lunch_second_group()))
    asyncio.run((check_start_lessons()))


def get_day_filename():
    days = {
        0: "ponedelnik.png",
        1: "vtornik.png",
        2: "sreda.png",
        3: "chetverg.png",
        4: "patnica.png",
        5: "Vihodnoy.png",
        6: "Vihodnoy.png"
    }

    today = datetime.datetime.now().weekday()
    return days.get(today)

def get_day_filename_tomorrow():
    days = {
        0: "ponedelnik.png",
        1: "vtornik.png",
        2: "sreda.png",
        3: "chetverg.png",
        4: "patnica.png",
        5: "Vihodnoy.png",
        6: "Vihodnoy.png"
    }

    today = datetime.datetime.now().weekday()
    tomorrow = today+1
    return days.get(tomorrow)

@router.message(Command('start'))
async def start_command(message: Message):
    try:
        await db_settings.create_tables()
        await db_settings.create_table_zamena()
    except:
        pass
    exists = await db_settings.user_exists(message.from_user.id)
    if str(exists) == '0':
        await db_settings.press_start(message.from_user.id, message.from_user.username)
    else:
        pass

    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(text='–ü–¢–û', callback_data='pto'))
    keyboard.add(types.InlineKeyboardButton(text='–°–°–û', callback_data='sso'))
    keyboard.adjust(1)
    check_group = await db_settings.check_group(message.from_user.id)
    if str(check_group) == 'None':
        await message.answer('<b>–ü—Ä–∏–≤–µ—Çüëã\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Ç–æ—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–Ω–∏üóì.\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –Ω–∞ –∫–∞–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç—ã –æ–±—É—á–∞–µ—à—å—Å—èüëá</b>', parse_mode='html', reply_markup=keyboard.as_markup())
    else:
        kb = [
            [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
            [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
        ]
        keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer('<b>–ò —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Çüëã</b>', reply_markup=keyboard1, parse_mode='html')

@router.callback_query(F.data == 'pto')
async def pto(call: CallbackQuery):
    await call.message.delete()
    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(text='–≠–°-10', callback_data='es-10'))
    keyboard.add(types.InlineKeyboardButton(text='–≠–ú-11', callback_data='em-11'))
    keyboard.add(types.InlineKeyboardButton(text='–≠–°-12', callback_data='es-12'))
    keyboard.add(types.InlineKeyboardButton(text='–°–ú-13', callback_data='sm-13'))
    keyboard.add(types.InlineKeyboardButton(text='–û–°-14', callback_data='os-14'))
    keyboard.add(types.InlineKeyboardButton(text='–≠–°-22', callback_data='es-22'))
    keyboard.add(types.InlineKeyboardButton(text='–ù–°-23', callback_data='ns-23'))
    keyboard.add(types.InlineKeyboardButton(text='–ú–û-24', callback_data='mo-24'))
    keyboard.add(types.InlineKeyboardButton(text='–ù–ú-33', callback_data='nm-33'))
    keyboard.add(types.InlineKeyboardButton(text='–ú–°-34', callback_data='ms-34'))
    keyboard.adjust(2)
    await call.message.answer('<b>–û—Ç–ª–∏—á–Ω–æüëå\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—Éüëá</b>', reply_markup=keyboard.as_markup(), parse_mode='html')

@router.callback_query(F.data == 'sso')
async def sso(call: CallbackQuery):
    await call.message.delete()
    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(text='–¢–≠-11', callback_data='te-11'))
    keyboard.add(types.InlineKeyboardButton(text='–¢–¢-12', callback_data='tt-12'))
    keyboard.add(types.InlineKeyboardButton(text='–¢-13', callback_data='t-13'))
    keyboard.add(types.InlineKeyboardButton(text='–¢–ú-14', callback_data='tm-14'))
    keyboard.add(types.InlineKeyboardButton(text='–¢–≠-21', callback_data='te-21'))
    keyboard.add(types.InlineKeyboardButton(text='–¢–¢-22', callback_data='tt-22'))
    keyboard.add(types.InlineKeyboardButton(text='–¢-23', callback_data='t-23'))
    keyboard.add(types.InlineKeyboardButton(text='–¢–ú-24', callback_data='tm-24'))
    keyboard.add(types.InlineKeyboardButton(text='–¢-33', callback_data='t-33'))
    keyboard.add(types.InlineKeyboardButton(text='–¢–ú-34', callback_data='tm-34'))
    keyboard.adjust(2)
    await call.message.answer('<b>–û—Ç–ª–∏—á–Ω–æüëå\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—Éüëá</b>', reply_markup=keyboard.as_markup(), parse_mode='html')

@router.callback_query(F.data == 'es-10')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –≠–°-10. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('es-10', call.from_user.id)

@router.callback_query(F.data == 'em-11')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –≠–ú-11. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('em-11', call.from_user.id)

@router.callback_query(F.data == 'es-12')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –≠–°-12. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('es-12', call.from_user.id)

@router.callback_query(F.data == 'sm-13')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –°–ú-13. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('sm-13', call.from_user.id)

@router.callback_query(F.data == 'os-14')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –û–°-13. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('os-14', call.from_user.id)

@router.callback_query(F.data == 'es-22')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –≠–°-22. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('es-22', call.from_user.id)

@router.callback_query(F.data == 'ns-23')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –ù–°-23. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('ns-23', call.from_user.id)

@router.callback_query(F.data == 'mo-24')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –ú–û-24. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('mo-24', call.from_user.id)

@router.callback_query(F.data == 'nm-33')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –ù–ú-33. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('nm-33', call.from_user.id)

@router.callback_query(F.data == 'ms-34')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –ú–°-34. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('ms-34', call.from_user.id)

@router.callback_query(F.data == 'te-11')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –¢–≠-11. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('te-11', call.from_user.id)

@router.callback_query(F.data == 'tt-12')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –¢–¢-12. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('tt-12', call.from_user.id)

@router.callback_query(F.data == 't-13')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –¢-13. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('t-13', call.from_user.id)

@router.callback_query(F.data == 'tm-14')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –¢–ú-14. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('tm-14', call.from_user.id)

@router.callback_query(F.data == 'te-21')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –¢–≠-21. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('te-21', call.from_user.id)

@router.callback_query(F.data == 'tt-22')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –¢–¢-22. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('tt-22', call.from_user.id)

@router.callback_query(F.data == 't-23')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –¢-23. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('t-23', call.from_user.id)

@router.callback_query(F.data == 'tm-24')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –¢–ú-24. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('tm-24', call.from_user.id)

@router.callback_query(F.data == 't-33')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –¢-33. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('t-33', call.from_user.id)

@router.callback_query(F.data == 'tm-34')
async def es10(call: CallbackQuery):
    kb = [
        [types.KeyboardButton(text='üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')],
        [types.KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
    ]
    keyboard1 = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await call.message.delete()
    await call.message.answer('<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –¢–ú-34. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá</b>', reply_markup=keyboard1, parse_mode='html')
    await db_settings.add_to_group('tm-34', call.from_user.id)

@router.message(F.text == 'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def raspisanie(message: Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(text='–°–µ–≥–æ–¥–Ω—è', callback_data='today'))
    keyboard.add(types.InlineKeyboardButton(text='–ó–∞–≤—Ç—Ä–∞', callback_data='tomorrow'))
    keyboard.add(types.InlineKeyboardButton(text='–î—Ä—É–≥–∏–µ –¥–Ω–∏', callback_data='other_days'))
    keyboard.adjust(1)
    await message.answer('<b>–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?ü§î</b>', parse_mode='html', reply_markup=keyboard.as_markup())

@router.message(F.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def settings(message: Message):
    keyboard = InlineKeyboardBuilder()
    notifi = await db_settings.check_notifi(message.from_user.id)
    if int(notifi) == 1:
        keyboard.add(types.InlineKeyboardButton(text='üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='off_notifi'))
    else:
        keyboard.add(types.InlineKeyboardButton(text='üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='on_notifi'))
    keyboard.add(types.InlineKeyboardButton(text='üë• –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data='change_group'))
    keyboard.add(types.InlineKeyboardButton(text='üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/skillex'))
    keyboard.adjust(1)
    await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—åüëá</b>', parse_mode='html', reply_markup=keyboard.as_markup())

@router.callback_query(F.data == 'change_group')
async def change_group(call: CallbackQuery):
    await call.message.delete()
    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(text='–ü–¢–û', callback_data='pto'))
    keyboard.add(types.InlineKeyboardButton(text='–°–°–û', callback_data='sso'))
    keyboard.adjust(1)
    await call.message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –æ–±—É—á–∞–µ—Ç–µ—Å—åüëá</b>', parse_mode='html', reply_markup=keyboard.as_markup())

@router.callback_query(F.data == 'off_notifi')
async def off_notifi(call: CallbackQuery):
    await call.message.delete()
    await db_settings.off_notifi(call.from_user.id)
    await call.message.answer("<b>üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!</b>", parse_mode='html')

@router.callback_query(F.data == 'on_notifi')
async def off_notifi(call: CallbackQuery):
    await call.message.delete()
    await db_settings.on_notifi(call.from_user.id)
    await call.message.answer("<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!</b>", parse_mode='html')

@router.callback_query(F.data == 'today')
async def today(call: CallbackQuery):
    await call.message.delete()
    now = datetime.datetime.now()
    formatted_date = now.strftime("%d.%m.%Y")
    zamena_date = await db_settings.check_date_zamena()
    zamena_photo = await db_settings.get_photo_zamena()
    if formatted_date == zamena_date:
        await call.message.answer_photo(zamena_photo, caption='<b>–ó–∞–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>', parse_mode='html')
    else:
        pass
    group_name = await db_settings.get_group(call.from_user.id)
    day_filename = get_day_filename()
    file_path = os.path.join(GROUPS_FOLDER, group_name, day_filename)
    photo = FSInputFile(file_path)
    if day_filename != 'Vihodnoy.png':
        await call.message.answer_photo(photo, caption='<b>–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, —É–¥–∞—á–Ω–æ–≥–æ –¥–Ω—èüëå</b>', parse_mode='html')
    else:
        await call.message.answer_photo(photo, caption='<b>–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–πüëå</b>', parse_mode='html')

@router.callback_query(F.data == 'tomorrow')
async def tomorrow(call: CallbackQuery):
    await call.message.delete()
    group_name = await db_settings.get_group(call.from_user.id)
    day_filename = get_day_filename_tomorrow()
    file_path = os.path.join(GROUPS_FOLDER, group_name, day_filename)
    photo = FSInputFile(file_path)
    if day_filename != 'Vihodnoy.png':
        await call.message.answer_photo(photo, caption='<b>–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, —É–¥–∞—á–Ω–æ–≥–æ –¥–Ω—èüëå</b>', parse_mode='html')
    else:
        await call.message.answer_photo(photo, caption='<b>–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–πüëå</b>', parse_mode='html')

@router.callback_query(F.data == 'other_days')
async def other_days(call: CallbackQuery):
    await call.message.delete()
    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='get_ponedelnik'))
    keyboard.add(types.InlineKeyboardButton(text='–í—Ç–æ—Ä–Ω–∏–∫', callback_data='get_vtornik'))
    keyboard.add(types.InlineKeyboardButton(text='–°—Ä–µ–¥–∞', callback_data='get_sreda'))
    keyboard.add(types.InlineKeyboardButton(text='–ß–µ—Ç–≤–µ—Ä–≥', callback_data='get_chetverg'))
    keyboard.add(types.InlineKeyboardButton(text='–ü—è—Ç–Ω–∏—Ü–∞', callback_data='get_patnica'))
    keyboard.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è', callback_data='back'))
    keyboard.adjust(1)
    await call.message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>', parse_mode='html', reply_markup=keyboard.as_markup())

@router.callback_query(F.data == 'get_ponedelnik')
async def ponedelnik(call: CallbackQuery):
    await call.message.delete()
    group_name = await db_settings.get_group(call.from_user.id)
    file_path = os.path.join(GROUPS_FOLDER, group_name, 'ponedelnik.png')
    photo = FSInputFile(file_path)
    await call.message.answer_photo(photo, '–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫!üëå')

@router.callback_query(F.data == 'get_vtornik')
async def vtornik(call: CallbackQuery):
    await call.message.delete()
    group_name = await db_settings.get_group(call.from_user.id)
    file_path = os.path.join(GROUPS_FOLDER, group_name, 'vtornik.png')
    photo = FSInputFile(file_path)
    await call.message.answer_photo(photo, '–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫!üëå')

@router.callback_query(F.data == 'get_sreda')
async def sreda(call: CallbackQuery):
    await call.message.delete()
    group_name = await db_settings.get_group(call.from_user.id)
    file_path = os.path.join(GROUPS_FOLDER, group_name, 'sreda.png')
    photo = FSInputFile(file_path)
    await call.message.answer_photo(photo, '–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ —Å—Ä–µ–¥—É!üëå')

@router.callback_query(F.data == 'get_chetverg')
async def chetverg(call: CallbackQuery):
    await call.message.delete()
    group_name = await db_settings.get_group(call.from_user.id)
    file_path = os.path.join(GROUPS_FOLDER, group_name, 'chetverg.png')
    photo = FSInputFile(file_path)
    await call.message.answer_photo(photo, '–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ —á–µ—Ç–≤–µ—Ä–≥!üëå')

@router.callback_query(F.data == 'get_patnica')
async def patnica(call: CallbackQuery):
    await call.message.delete()
    group_name = await db_settings.get_group(call.from_user.id)
    file_path = os.path.join(GROUPS_FOLDER, group_name, 'patnica.png')
    photo = FSInputFile(file_path)
    await call.message.answer_photo(photo, '–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É!üëå')


@router.callback_query(F.data == 'back')
async def back(call: CallbackQuery):
    await call.message.delete()
    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(text='–°–µ–≥–æ–¥–Ω—è', callback_data='today'))
    keyboard.add(types.InlineKeyboardButton(text='–ó–∞–≤—Ç—Ä–∞', callback_data='tomorrow'))
    keyboard.add(types.InlineKeyboardButton(text='–î—Ä—É–≥–∏–µ –¥–Ω–∏', callback_data='other_days'))
    keyboard.adjust(1)
    await call.message.answer('<b>–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?ü§î</b>', parse_mode='html',
                         reply_markup=keyboard.as_markup())

class AddSpam(StatesGroup):
    message = State()
    photo = State()

@router.message(Command('spam'), StateFilter(None))
async def spam(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        pass
    else:
        keyboard = InlineKeyboardBuilder()
        keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>', parse_mode='html', reply_markup=keyboard.as_markup())
        await state.set_state(AddSpam.message)

@router.message(AddSpam.message)
async def spam(message: Message, state: FSMContext):
    await state.update_data(message=message.text)
    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data='spam_photo_yes'))
    keyboard.add(types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='spam_photo_no'))
    keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    await message.answer('<b>–û—Ç–ª–∏—á–Ω–æ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ —Ä–∞—Å—Å—ã–ª–∫—É?</b>', parse_mode='html', reply_markup=keyboard.as_markup())

@router.callback_query(F.data == 'spam_photo_yes')
async def spam_photo_yes(call: CallbackQuery, state: FSMContext):
    await call.message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
    await state.set_state(AddSpam.photo)

@router.message(AddSpam.photo)
async def spam(message: Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É!')
    data = await state.get_data()
    message = data['message']
    photo = data['photo']
    suc_users = 0
    fail_users = 0
    users = await db_settings.get_all_users()
    for user in users:
        try:
            await bot.send_photo(user[0], photo, caption=f'{message}')
            suc_users += 1
        except:
            fail_users += 1
    await bot.send_message(ADMIN_IDS[0], f'–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {suc_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
    await bot.send_message(ADMIN_IDS[0], f'–ù–µ—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {fail_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
    await state.clear()


@router.callback_query(F.data == 'spam_photo_no')
async def spam_photo_no(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    message = data['message']
    users = await db_settings.get_all_users()
    suc_users = 0
    fail_users = 0
    for user in users:
        try:
            await bot.send_message(user[0], f'{message}')
            suc_users += 1
        except:
            fail_users += 1
    await bot.send_message(ADMIN_IDS[0], f'–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {suc_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
    await bot.send_message(ADMIN_IDS[0], f'–ù–µ—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {fail_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
    await state.clear()

class Zamena(StatesGroup):
    date = State()
    photo = State()

@router.message(Command('add_zamena'), StateFilter(None))
async def add_zamena(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        pass
    else:
        keyboard = InlineKeyboardBuilder()
        keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
        await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:</b>', reply_markup=keyboard.as_markup(), parse_mode='html')
        await state.set_state(Zamena.date)

@router.message(Zamena.date)
async def zamena(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    await message.answer('<b>–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å —Ñ–æ—Ç–æ –∑–∞–º–µ–Ω—ã:</b>', reply_markup=keyboard.as_markup(), parse_mode='html')
    await state.set_state(Zamena.photo)

@router.message(Zamena.photo)
async def zamena(message: Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    data = await state.get_data()
    date = data['date']
    photo = data['photo']
    await db_settings.add_zamena(photo, date)
    await bot.send_photo(ADMIN_IDS[0], photo, caption=f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–º–µ–Ω–∞ –Ω–∞ {date}')
    users = await db_settings.get_all_users()
    for user in users:
        try:
            await bot.send_photo(user[0], photo, caption=f'–ó–∞–º–µ–Ω–∞ –Ω–∞ {date}')
        except:
            pass
    await state.clear()


@router.callback_query(F.data == 'cancel')
async def cancel(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ')


async def main():
    process = Process(target=start_check_lunc)
    process.start()
    await dp.start_polling(bot)
    process.join()


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())